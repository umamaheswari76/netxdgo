limit -> number of records for that limit function
            db.getCollection("posts").find().limit(10)

count -> provides the total number of records
            db.getCollection("posts").find().count()

fetching only some fields after the find
            db.getCollection("posts")
            .find({},{body:1})
            .limit(20)
            .sort({"body":1})

$project  -> it passes along the documents with only specified fields,
             to the next stage in the pipeline

             db.getCollection("transactions")
            .aggregate(
            [{
                $project:{
                    _id: null,
                    account_id:1,
                    totalTransactions: {
                        $sum:"$transactions.amount"
                    }
                }
            }]
            )         

$and
db.getCollection("transactions")
.find({
    "$and":[
    
        {"transaction_count":{"$eq":100}},
        {"account_id":{"$gt":7000}}
    ]})

go through - have examples for all(bth mongodb and go)

$match -> acting as a search query that can be integrated with aggregation pipeline
$group   
$sort
$project
$unwind -> used to split the array fields into seperate documents, for each element in  the array
            db.getCollection("students").aggregate([{
            $unwind :"$course"}])
$pipeline -> when we are performing the aggregations, pipeline will give the ifferent stages to perfrm the aggregation

$lookup -> used to perform the join between two tables (map between two tables)
            db.getCollection("Books").aggregate([{
                $lookup:{
                    from : "Authors",
                    localField : "author_id",
                    foreignField : "_id",
                    as: "AuthorDetail"
                }
            }])


aggregation --> project --> match --> group


operators  -> https://www.mongodb.com/docs/manual/meta/aggregation-quick-reference/#std-label-aggregation-expressions


***********************************************
defining the models
creating operations
creating the context
providing implementation 

data access layer --> restapi

***********************************************

package main

import (
	//"MongoDb/config"
//	"MongoDb/models"
	"MongoDb/services"

	//"MongoDb/constants"
	//"context"
	"fmt"

	//"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	//"go.mongodb.org/mongo-driver/mongo/options"
	//"go.mongodb.org/mongo-driver/mongo/readpref"
)

//mongoclient as global var
var(
    mongoClient *mongo.Client
)

func main(){
    //    ctx:=context.TODO()

    //    mongoconn:=options.Client().ApplyURI(constants.ConnectionString)
    //    mongoclient,err:=mongo.Connect(ctx,mongoconn)
    //    if err!=nil{
    //     panic(err)
    //    }
    //    if err:=mongoclient.Ping(ctx,readpref.Primary()); err!=nil{
    //     panic(err)
    //    }
    // client,_ := config.ConnectDataBase()
    // collection := config.GetCollection(client,"sample_training","zips")
       fmt.Println("MongoDB successfully connected..")
    //    product := models.Product{ID: primitive.NewObjectID(),Name: "Samsung",Price :1}
    //    services.InsertProduct(product)
   
    // products := [] interface{}{
    //     models.Product{ID:primitive.NewObjectID(),Name:"oneplus",Price:1000000,Description: "this is oneplus"},
    //     models.Product{ID:primitive.NewObjectID(),Name:"oneplus",Price:1000000,Description: "this is oneplus"},
    // }
    // services.InsertProductList(products)

    // products,_ := services.FindProducts()
    // for _,product := range products{
    //     fmt.Println(product)

    // }
    // restaurants,_ := services.FindRestaurant()
    // for _,restaurant := range restaurants{
    //     fmt.Println(restaurant.Name)

    // }
    transactions,_ := services.FindTransaction()
    for ind,transaction := range(transactions){
        fmt.Println(ind," ",transaction.Account_id)
    }
}